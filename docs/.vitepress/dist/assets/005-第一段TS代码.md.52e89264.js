import{o as n,c as s,a}from"./app.589c5546.js";const p='{"title":"开始使用","description":"","frontmatter":{},"headers":[{"level":2,"title":"开始使用","slug":"开始使用"}],"relativePath":"005-第一段TS代码.md","lastUpdated":1622474906152}',t={},o=a('<h2 id="开始使用"><a class="header-anchor" href="#开始使用" aria-hidden="true">#</a> 开始使用</h2><p>开始 玩无非就是简单的 demo 然后在 vue 中的应用 在 react 中的应用 其次生态 玩一玩生态，大体是要简单的写写 ts 的代码，我现在在看说唱，我们这样，定义一个对象，然后数一数 rapper</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> rappers <span class="token operator">=</span> <span class="token punctuation">{</span>\n    first<span class="token operator">:</span><span class="token string">&quot;subs&quot;</span>，\n    sec<span class="token operator">:</span><span class="token string">&#39;彤彤&#39;</span><span class="token punctuation">,</span>\n    thir<span class="token operator">:</span><span class="token string">&quot;姜云升&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>我们 getter 读取每一个说唱歌手，</p><div class="language-"><pre><code>console.log(rappers[&#39;sec&#39;])\n</code></pre></div><p>这时候我们直接打印第四个歌手，可能会出问题，你都学 ts js 的基本类型应该晓得，参见 top-fe-iqa</p><div class="language-js"><pre><code>boolean，bigint，<span class="token keyword">null</span>，number，string，symbol，object，和<span class="token keyword">undefined</span>\n</code></pre></div><p>这里重点说一下，类型</p><div class="language-"><pre><code>Number\t双精度IEEE 754浮点数。\nString\t一个不变的UTF-16字符串。\nBigInt\t任意精度格式的整数。\nBoolean\ttrue和false。\nSymbol\t通常用作键的唯一值。\nNull\t等同于单位类型。\nUndefined\t也等同于单位类型。\nObject\t类似于记录。\n</code></pre></div><p>ts 不愧是 ts 在定义类型的时候，简单的扩展了几种 一是 any <a href="https://www.typescriptlang.org/play#example/unknown-and-never" target="_blank" rel="noopener noreferrer"><code>unknown</code></a> never void 现在没必要知道怎么用</p><p>我们使用接口来编写这个对象的类型</p><div class="language-typescript"><pre><code><span class="token keyword">interface</span> <span class="token class-name">IRappers</span> <span class="token punctuation">{</span>\n  first<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  sec<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以通俗的解释，通过接口来描述你当前的对象</p><div class="language-"><pre><code>const rappers:IRappers = {\n\n}\n</code></pre></div><p>除了接口 也有 type ，至于两者有什么区别，现阶段不必要纠结，还有一种场景 一个数据它比较复杂，不是简单布尔或者对象，这时候我们就要构造一个相对复杂的类型修饰 <strong>联合</strong> **泛型 **</p><p>当然上文出现的关键词后边会讲到</p><div class="language-typescript"><pre><code><span class="token keyword">interface</span> <span class="token class-name">IAdd</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> IxAdd<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> data<span class="token punctuation">.</span>x <span class="token operator">+</span> data<span class="token punctuation">.</span>y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>两数相加的场景，两个输入框一个相加的按钮，</p><ul><li>首先保证相加的两个部分都是数值类型数字类型的我们知道两个字符串数字相加的达不到效果</li><li>逆向思维 先写一段 ts 代码 然后 编译一下</li></ul><div class="language-"><pre><code>\n</code></pre></div><p><strong>遇到的问题</strong></p><div class="language-"><pre><code>tsc .\\first-ts.ts\n+ ~~~\n    + CategoryInfo          : SecurityError: (:) []，PSSecurityException\n    + FullyQualifiedErrorId : UnauthorizedAccess\n</code></pre></div><p>这时候无非是一些终端的权限问题</p><ul><li><p>用管理员权限打开 vscode</p></li><li><p>然后修改权限 set-ExecutionPolicy RemoteSigned;</p></li><li><p>查看 get-ExecutionPolicy，就显示 RemoteSigned</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> number1Dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#number1&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">;</span>\n<span class="token keyword">const</span> number2Dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#number2&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">evtHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> val1 <span class="token operator">=</span> number1Dom<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> val2 <span class="token operator">=</span> number2Dom<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">+</span>val1<span class="token punctuation">,</span> <span class="token operator">+</span>val2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>\n\n</code></pre></div></li></ul><p>上述的 ts 通过 tsc 编译 上文有提到一种编译的方式，我们来对比一下使用 js 有什么问题</p><p>先来贴一下编译后的 js</p><div class="language-javascript"><pre><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> number1Dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#number1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> number2Dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#number2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">evtHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> val1 <span class="token operator">=</span> number1Dom<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> val2 <span class="token operator">=</span> number2Dom<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">+</span>val1<span class="token punctuation">,</span> <span class="token operator">+</span>val2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> evtHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>我们要对类型进行优化，确保相加的是两个数字</p><div class="language-javascript"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">+</span>a <span class="token operator">+</span> <span class="token operator">+</span>b<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',29);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
